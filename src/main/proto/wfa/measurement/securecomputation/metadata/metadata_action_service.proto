// Copyright 2024 The Cross-Media Measurement Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package wfa.measurement.securecomputation.metadata;

import "wfa/measurement/securecomputation/metadata/metadata_action.proto";
import "google/protobuf/timestamp.proto";


option java_package = "org.wfanet.measurement.securecomputation.metadata";
option java_multiple_files = true;
option java_outer_classname = "MetadataActionServiceProto";

service MetadataActionService {
  rpc CreateMetadataAction(CreateMetadataActionRequest) returns (MetadataAction);

  rpc GetMetadataAction(GetMetadataActionRequest) returns (MetadataAction);

  rpc StreamMetadataAction(StreamMetadataActionRequest) returns (StreamMetadataActionResponse);
}

message CreateMetadataActionRequest {
  fixed64 external_data_provider_id = 1;
  fixed64 external_resource_id = 2;
  ActorType actor_type = 3;
  State prior_state = 4;
  State new_state = 5;
  google.protobuf.Timestamp action_time = 6;
}

message GetMetadataActionRequest {
  fixed64 action_id = 1;
  fixed64 external_data_provider_id = 2;
  fixed64 external_resource_id = 3;
}

message StreamMetadataActionRequest {
  message AfterFilter {
    google.protobuf.Timestamp action_time = 1;
  }
  message Filter {
    fixed64 external_data_provider_id = 1;
    fixed64 external_resource_id = 2;
    ActorType actor_type = 3;
    AfterFilter after = 4;
  }

  Filter filter = 1;

  // The maximum number of results to return. If not specified or 0, it implies
  // unlimited.
  int32 limit = 2;
}

message StreamMetadataActionResponse {
  repeated MetadataAction metadata_actions = 1;
}